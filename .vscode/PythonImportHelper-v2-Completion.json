[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security.oauth2",
        "description": "fastapi.security.oauth2",
        "isExtraImport": true,
        "detail": "fastapi.security.oauth2",
        "documentation": {}
    },
    {
        "label": "sqlalchemy.orm",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "psycopg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg",
        "description": "psycopg",
        "detail": "psycopg",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy.sql.sqltypes",
        "description": "sqlalchemy.sql.sqltypes",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.sqltypes",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "conint",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "user_login",
        "kind": 2,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "def user_login(user_credentials: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):\n    user = db.query(models.User).filter(models.User.email == user_credentials.username).first()\n    if not user:\n        raise HTTPException(status_code= status.HTTP_401_UNAUTHORIZED, detail= \"Invalid Credentials\")\n    if not utils.verify_password(user_credentials.password, user.password):\n        raise HTTPException(status_code= status.HTTP_401_UNAUTHORIZED, detail= \"Invalid Credentials\")\n    access_token = oath2.create_access_token({\"user_id\": user.id})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "router = APIRouter(tags = [\"Authentication\"])\n@router.post(\"/login\", response_model= schemas.Token)\ndef user_login(user_credentials: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):\n    user = db.query(models.User).filter(models.User.email == user_credentials.username).first()\n    if not user:\n        raise HTTPException(status_code= status.HTTP_401_UNAUTHORIZED, detail= \"Invalid Credentials\")\n    if not utils.verify_password(user_credentials.password, user.password):\n        raise HTTPException(status_code= status.HTTP_401_UNAUTHORIZED, detail= \"Invalid Credentials\")\n    access_token = oath2.create_access_token({\"user_id\": user.id})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "get_posts",
        "kind": 2,
        "importPath": "app.routers.posts",
        "description": "app.routers.posts",
        "peekOfCode": "def get_posts(db: Session = Depends(get_db), user:models.User = Depends(oath2.get_current_user), limit: int = 10, skip: int = 0, search: Optional[str] = \"\"):\n    # cur = conn.cursor(row_factory=dict_row)\n    # posts = cur.execute(\"\"\"SELECT * FROM posts\"\"\").fetchall()\n    posts = db.query(models.Post).filter(models.Post.title.contains(search)).limit(limit).offset(skip).all()\n    return posts\n@router.post(\"/\", status_code= status.HTTP_201_CREATED, response_model= schemas.Post)\ndef create_posts(post:schemas.CreatePost, db: Session = Depends(get_db), user:models.User = Depends(oath2.get_current_user)):\n    # cur = conn.cursor(row_factory=dict_row)\n    # post_created = cur.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING *\"\"\",(post.title,post.content,post.published)).fetchone()\n    # conn.commit()",
        "detail": "app.routers.posts",
        "documentation": {}
    },
    {
        "label": "create_posts",
        "kind": 2,
        "importPath": "app.routers.posts",
        "description": "app.routers.posts",
        "peekOfCode": "def create_posts(post:schemas.CreatePost, db: Session = Depends(get_db), user:models.User = Depends(oath2.get_current_user)):\n    # cur = conn.cursor(row_factory=dict_row)\n    # post_created = cur.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING *\"\"\",(post.title,post.content,post.published)).fetchone()\n    # conn.commit()\n    post_created = models.Post(user_id= user.id, **post.dict())\n    db.add(post_created)\n    db.commit()\n    db.refresh(post_created)\n    return post_created\n@router.get(\"/latest\", response_model= schemas.Post)",
        "detail": "app.routers.posts",
        "documentation": {}
    },
    {
        "label": "get_latest_post",
        "kind": 2,
        "importPath": "app.routers.posts",
        "description": "app.routers.posts",
        "peekOfCode": "def get_latest_post(db: Session = Depends(get_db), user:models.User = Depends(oath2.get_current_user)):\n    # curr = conn.cursor(row_factory=dict_row)\n    # latest_post = curr.execute(\"\"\"SELECT * FROM posts ORDER BY created_at DESC LIMIT 1\"\"\").fetchone()\n    # conn.commit()\n    latest_post = db.query(models.Post).order_by(models.Post.created_at.desc()).first()\n    return latest_post\n@router.get(\"/{id}\", response_model= schemas.Post)\ndef get_post(id: int, db: Session = Depends(get_db), user:models.User = Depends(oath2.get_current_user)):\n    # cur = conn.cursor(row_factory=dict_row)\n    # required_post = cur.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (str(id),)).fetchone()",
        "detail": "app.routers.posts",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "app.routers.posts",
        "description": "app.routers.posts",
        "peekOfCode": "def get_post(id: int, db: Session = Depends(get_db), user:models.User = Depends(oath2.get_current_user)):\n    # cur = conn.cursor(row_factory=dict_row)\n    # required_post = cur.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (str(id),)).fetchone()\n    required_post = db.query(models.Post).filter(models.Post.id == id).first()\n    if required_post == None:\n        raise HTTPException(status_code= status.HTTP_404_NOT_FOUND, detail= f\"The post with id: {id} is not found\")\n    return required_post\n@router.delete(\"/{id}\", status_code= status.HTTP_204_NO_CONTENT)\ndef delete_post(id: int, db: Session = Depends(get_db), user:models.User = Depends(oath2.get_current_user)):\n    # cur = conn.cursor(row_factory=dict_row)",
        "detail": "app.routers.posts",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "app.routers.posts",
        "description": "app.routers.posts",
        "peekOfCode": "def delete_post(id: int, db: Session = Depends(get_db), user:models.User = Depends(oath2.get_current_user)):\n    # cur = conn.cursor(row_factory=dict_row)\n    # deleted_post = cur.execute(\"\"\"DELETE FROM posts WHERE id = %s RETURNING *\"\"\",(str(id),)).fetchone()\n    deleted_post_query = db.query(models.Post).filter(models.Post.id == id)\n    deleted_post = deleted_post_query.first()\n    if deleted_post == None:\n        raise HTTPException(status_code= status.HTTP_404_NOT_FOUND, detail= f\"The post with id = {id} was not found\")\n    if deleted_post.user_id != user.id:\n        raise HTTPException(status_code= status.HTTP_403_FORBIDDEN, detail= \"You are not authorized to delete the post\")\n    deleted_post_query.delete(synchronize_session= False)",
        "detail": "app.routers.posts",
        "documentation": {}
    },
    {
        "label": "update_post",
        "kind": 2,
        "importPath": "app.routers.posts",
        "description": "app.routers.posts",
        "peekOfCode": "def update_post(id:int, update_post:schemas.CreatePost, db: Session = Depends(get_db), user:models.User = Depends(oath2.get_current_user)):\n    # curr = conn.cursor(row_factory=dict_row)\n    # updated_post = curr.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s RETURNING *\"\"\",(post.title, post.content, post.published, str(id))).fetchone()\n    # conn.commit()\n    post_query = db.query(models.Post).filter(models.Post.id == id)\n    post = post_query.first()\n    if post == None:\n        raise HTTPException(status_code= status.HTTP_404_NOT_FOUND, detail= f\"The post with id = {id} was not found\")\n    if post.user_id != user.id:\n        raise HTTPException(status_code= status.HTTP_403_FORBIDDEN, detail= \"You are not authorized to update the post\")",
        "detail": "app.routers.posts",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.posts",
        "description": "app.routers.posts",
        "peekOfCode": "router = APIRouter(\n    prefix= \"/posts\",\n    tags=[\"Posts\"]\n)\n@router.get(\"/\", response_model=List[schemas.Post])\ndef get_posts(db: Session = Depends(get_db), user:models.User = Depends(oath2.get_current_user), limit: int = 10, skip: int = 0, search: Optional[str] = \"\"):\n    # cur = conn.cursor(row_factory=dict_row)\n    # posts = cur.execute(\"\"\"SELECT * FROM posts\"\"\").fetchall()\n    posts = db.query(models.Post).filter(models.Post.title.contains(search)).limit(limit).offset(skip).all()\n    return posts",
        "detail": "app.routers.posts",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.routers.users",
        "description": "app.routers.users",
        "peekOfCode": "def create_user(new_user: schemas.CreateUser, db: Session = Depends(get_db)):\n    hashed_password = utils.hash(new_user.password)\n    new_user.password = hashed_password\n    user = models.User(**new_user.dict())\n    db.add(user)\n    db.commit()\n    db.refresh(user)\n    return user\n@router.get(\"/{id}\", response_model=schemas.UserOut)\ndef get_user(id: int, db: Session = Depends(get_db)):",
        "detail": "app.routers.users",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "app.routers.users",
        "description": "app.routers.users",
        "peekOfCode": "def get_user(id: int, db: Session = Depends(get_db)):\n    user = db.query(models.User).filter(models.User.id == id).first()\n    if not user:\n        raise HTTPException(status_code= status.HTTP_404_NOT_FOUND, detail= f\"User with user id = {id} was not found\")\n    return user",
        "detail": "app.routers.users",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.users",
        "description": "app.routers.users",
        "peekOfCode": "router = APIRouter(\n    prefix = \"/users\",\n    tags= [\"Users\"]\n)\n@router.post(\"/\", status_code= status.HTTP_201_CREATED, response_model=schemas.UserOut)\ndef create_user(new_user: schemas.CreateUser, db: Session = Depends(get_db)):\n    hashed_password = utils.hash(new_user.password)\n    new_user.password = hashed_password\n    user = models.User(**new_user.dict())\n    db.add(user)",
        "detail": "app.routers.users",
        "documentation": {}
    },
    {
        "label": "vote",
        "kind": 2,
        "importPath": "app.routers.votes",
        "description": "app.routers.votes",
        "peekOfCode": "def vote(vote: schemas.Vote, db: Session = Depends(get_db), user: models.User = Depends(oath2.get_current_user)):\n    post = db.query(models.Post).filter(models.Post.id == vote.post_id).first()\n    if not post:\n        raise HTTPException(status_code= status.HTTP_404_NOT_FOUND, detail= \"Post does not exist\")\n    vote_query = db.query(models.Vote).filter(models.Vote.post_id == vote.post_id, models.Vote.user_id == user.id)\n    found_vote = vote_query.first()\n    if(vote.dir == 1):\n        if found_vote:\n            raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail= f\"User {user.id} has already voted on post {vote.post_id}\")\n        new_vote = models.Vote(post_id = vote.post_id, user_id = user.id)",
        "detail": "app.routers.votes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.votes",
        "description": "app.routers.votes",
        "peekOfCode": "router = APIRouter(\n    tags=[\"Votes\"],\n    prefix=\"/vote\"\n)\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\ndef vote(vote: schemas.Vote, db: Session = Depends(get_db), user: models.User = Depends(oath2.get_current_user)):\n    post = db.query(models.Post).filter(models.Post.id == vote.post_id).first()\n    if not post:\n        raise HTTPException(status_code= status.HTTP_404_NOT_FOUND, detail= \"Post does not exist\")\n    vote_query = db.query(models.Vote).filter(models.Vote.post_id == vote.post_id, models.Vote.user_id == user.id)",
        "detail": "app.routers.votes",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Settings(BaseSettings):\n    database_hostname: str\n    database_port: str\n    database_password: str\n    database_name: str\n    database_username: str\n    secret_key: str\n    algorithm: str\n    access_token_expire_minutes: int\n    class Config:",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "settings = Settings()",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# while True:\n#     try:\n#         correct_password = input(\"Enter the correct password: \")\n#         conn = psycopg.connect(dbname=\"Social Media\", user=\"postgres\", password=correct_password)",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = f\"postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# while True:",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# while True:\n#     try:",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# while True:\n#     try:\n#         correct_password = input(\"Enter the correct password: \")",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "get_message",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def get_message():\n    return {\"message\": \"hello\"}\napp.include_router(posts.router)\napp.include_router(users.router)\napp.include_router(auth.router)\napp.include_router(votes.router)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/\")\ndef get_message():\n    return {\"message\": \"hello\"}\napp.include_router(posts.router)\napp.include_router(users.router)\napp.include_router(auth.router)\napp.include_router(votes.router)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Post(Base):\n    __tablename__ = \"posts\"\n    id = Column(Integer, primary_key= True, nullable= False)\n    title = Column(String, nullable= False)\n    content = Column(String, nullable= False)\n    published = Column(Boolean, server_default= 'True', nullable= False)\n    created_at = Column(TIMESTAMP(timezone=True), server_default= text('now()'), nullable= False)\n    user_id = Column(Integer, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), nullable=False)\n    user = relationship(\"User\")\nclass User(Base):",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, nullable= False)\n    email = Column(String, nullable=False, unique=True)\n    password = Column(String, nullable= False)\n    created_at = Column(TIMESTAMP(timezone=True), server_default= text('now()'), nullable= False)\nclass Vote(Base):\n    __tablename__ = \"votes\"\n    user_id = Column(Integer, ForeignKey(\"users.id\", ondelete= \"CASCADE\"), primary_key= True)\n    post_id = Column(Integer, ForeignKey(\"posts.id\", ondelete= \"CASCADE\"), primary_key= True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Vote(Base):\n    __tablename__ = \"votes\"\n    user_id = Column(Integer, ForeignKey(\"users.id\", ondelete= \"CASCADE\"), primary_key= True)\n    post_id = Column(Integer, ForeignKey(\"posts.id\", ondelete= \"CASCADE\"), primary_key= True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.oath2",
        "description": "app.oath2",
        "peekOfCode": "def create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        id: int = payload.get(\"user_id\")",
        "detail": "app.oath2",
        "documentation": {}
    },
    {
        "label": "verify_access_token",
        "kind": 2,
        "importPath": "app.oath2",
        "description": "app.oath2",
        "peekOfCode": "def verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        id: int = payload.get(\"user_id\")\n        if id is None:\n            raise credentials_exception\n        token_data = schemas.TokenData(id = id)\n    except JWTError:\n        raise credentials_exception\n    return token_data",
        "detail": "app.oath2",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "app.oath2",
        "description": "app.oath2",
        "peekOfCode": "def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(database.get_db)):\n    credentials_exception = HTTPException(status_code= status.HTTP_401_UNAUTHORIZED, detail=\"Could not validate credentials\", headers= {\"WWW-Authenticate\": \"Bearer\"})\n    payload = verify_access_token(token, credentials_exception)\n    user = db.query(models.User).filter(models.User.id == payload.id).first()\n    return user",
        "detail": "app.oath2",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "app.oath2",
        "description": "app.oath2",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl='login')\nSECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
        "detail": "app.oath2",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.oath2",
        "description": "app.oath2",
        "peekOfCode": "SECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):",
        "detail": "app.oath2",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.oath2",
        "description": "app.oath2",
        "peekOfCode": "ALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\n    try:",
        "detail": "app.oath2",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "app.oath2",
        "description": "app.oath2",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])",
        "detail": "app.oath2",
        "documentation": {}
    },
    {
        "label": "BasePost",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class BasePost(BaseModel):\n    title: str\n    content: str\n    published: bool = True\nclass CreatePost(BasePost):\n    pass\nclass UserOut(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "CreatePost",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class CreatePost(BasePost):\n    pass\nclass UserOut(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass Post(BasePost):\n    id: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserOut(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass Post(BasePost):\n    id: int\n    created_at: datetime\n    user: UserOut",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Post(BasePost):\n    id: int\n    created_at: datetime\n    user: UserOut\n    class Config:\n        orm_mode = True\nclass CreateUser(BaseModel):\n    email: EmailStr\n    password: str\nclass UserLogin(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "CreateUser",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class CreateUser(BaseModel):\n    email: EmailStr\n    password: str\nclass UserLogin(BaseModel):\n    email: EmailStr\n    password: str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserLogin(BaseModel):\n    email: EmailStr\n    password: str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[int] = None\nclass Vote(BaseModel):\n    post_id: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[int] = None\nclass Vote(BaseModel):\n    post_id: int\n    dir: conint(le=1, ge=0)",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class TokenData(BaseModel):\n    id: Optional[int] = None\nclass Vote(BaseModel):\n    post_id: int\n    dir: conint(le=1, ge=0)",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Vote(BaseModel):\n    post_id: int\n    dir: conint(le=1, ge=0)",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def hash(password: str):\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated = \"auto\")\ndef hash(password: str):\n    return pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    }
]